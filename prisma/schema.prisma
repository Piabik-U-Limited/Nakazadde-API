// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Authentication and Account set up
model User {
  id               String          @id @unique() @default(uuid())
  name             String
  location         String?
  gender           Gender?
  email            EmailAddress?
  occupation       String?
  joinedAt         DateTime        @default(now())
  dateOfBirth      DateTime?
  about            String?
  phone            PhoneNumber?
  password         Password?
  medicalOfficer   MedicalOfficer?
  photo            ProfilePhoto?
  otp              Otp[]
  token            Token[]
  notifications    Notifications[]
  posts            Post[]
  comments         PostComment[]
  likes            PostLike[]
  userOneChats     Chat[]          @relation("chatsAsOne")
  userTwoChats     Chat[]          @relation("chatsAsTwo")
  sentMessages     Message[]       @relation("UserSendingMessage")
  receivedMessages Message[]       @relation("UserReceivingingMessage")
  forums           Forum[]         @relation("createdBy")
  membership       Member[]        @relation("memberOf")
  followings       Follow[]        @relation("userIsFollowing")
  followers        Follow[]        @relation("userIsFollowedBy")
}

enum Gender {
  Male
  Female
}

model EmailAddress {
  id         String    @id @default(uuid())
  email      String    @unique
  isVerified Boolean   @default(false)
  verifiedAt DateTime?
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?   @unique

  @@map("EmailAddresses")
}

model PhoneNumber {
  id         String    @id @default(uuid())
  phone      String    @unique
  isVerified Boolean   @default(false)
  verifiedAt DateTime?
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?   @unique

  @@map("PhoneNumbers")
}

model Password {
  id        String    @id @default(uuid())
  hash      String
  salt      String
  setAt     DateTime  @default(now())
  updatedAt DateTime?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?   @unique

  @@map("Passwords")
}

model ProfilePhoto {
  id        String    @id @unique() @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @unique
  url       String
  publicId  String
  setAt     DateTime  @default(now())
  updatedAt DateTime?
}

model Otp {
  id     String   @id @unique() @default(uuid())
  code   String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  setAt  DateTime @default(now())
}

model Token {
  id     String @id @unique() @default(uuid())
  token  String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model MedicalOfficer {
  id           String     @id @unique() @default(uuid())
  speciality   Speciality
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String     @unique
  facilityName String?
  role         Role
}

enum Speciality {
  Doctor
  Nurse
  Surgeon
  Dentist
  MidWife
  Pharmacist
  Optician
  Physiotherapist
  Psychologis
  Psychiatris
  OccupationalTherapis
  Radiologis
  Anesthesiologis
  Dietitian
  Optometrist
  Chiropractor
  Podiatrist
  Paramedic
}

enum Role {
  Student
  Internee
  Practitioner
}

model Notifications {
  id      String   @id @default(uuid())
  message String
  isRead  Boolean  @default(false)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  time    DateTime @default(now())

  @@map("Notifications")
}

model Post {
  id        String        @id @default(uuid())
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  content   String?       @db.VarChar(500)
  privacy   Privacy       @default(Public)
  category  PostCategory  @default(Photo)
  createdAt DateTime      @default(now())
  updatedAt DateTime?
  likes     PostLike[]
  assets    PostAsset[]
  views     PostView[]
  comments  PostComment[]

  @@map("Posts")
}

enum PostCategory {
  Photo
  Event
  Album
  Video
  Audio
  File
  Celebration
}

enum Privacy {
  Public
  Private
}

model PostLike {
  id     String  @id @default(uuid())
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("PostLikes")
}

model PostComment {
  id      String  @id @default(uuid())
  post    Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String?
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  messege String

  @@map("PostComments")
}

model PostAsset {
  id        String  @id @default(uuid())
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  url       String
  mediaType String?
  publicId  String?
}

model PostView {
  id     String  @id @default(uuid())
  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?
}

model Chat {
  id        String @id @default(uuid())
  userOne   User   @relation("chatsAsOne", fields: [userOneId], references: [id], onDelete: Cascade)
  userOneId String
  userTwo   User   @relation("chatsAsTwo", fields: [userTwoId], references: [id], onDelete: Cascade)
  userTwoId String

  messages Message[]
}

model Message {
  id         String @id @default(uuid())
  Chat       Chat?  @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId     String
  sender     User?  @relation("UserSendingMessage", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User?  @relation("UserReceivingingMessage", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
  message    String @db.VarChar(1000)
}

model Forum {
  id          String   @id @default(uuid())
  name        String
  createdAt   DateTime @default(now())
  creator     User     @relation("createdBy", fields: [creatorId], references: [id])
  creatorId   String
  members     Member[] @relation("memberToForum")
  description String   @db.VarChar(500)
  icon        Icon?    @relation()

  @@map("Forums")
}

model Icon {
  id        String    @id @default(uuid())
  forum     Forum     @relation(fields: [forumId], references: [id], onDelete: Cascade)
  forumId   String    @unique
  url       String
  publicId  String
  setAt     DateTime  @default(now())
  updatedAt DateTime?

  @@map("Icons")
}

model Member {
  id         String           @id @default(uuid())
  forum      Forum            @relation("memberToForum", fields: [forumId], references: [id], onDelete: Cascade)
  forumId    String
  user       User             @relation("memberOf", fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  joinedAt   DateTime         @default(now())
  status     MembershipStatus @default(Pending)
  ForumAdmin ForumAdmin[]

  @@map("Members")
}

model ForumAdmin {
  id       String @id @default(uuid())
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String
}

enum MembershipStatus {
  Pending
  Active
  Suspended
  Removed
}

model Follow {
  id         String @id @default(uuid())
  follower   User   @relation("userIsFollowedBy", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String
  followee   User   @relation("userIsFollowing", fields: [followeeId], references: [id], onDelete: Cascade)
  followeeId String
}
